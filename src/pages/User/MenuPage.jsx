// src/pages/User/MenuPage.jsx

import React, { useState, useEffect, useRef } from 'react'; 
// Import c√°c icon t·ª´ lucide-react
import { Wine, Coffee, ChefHat, Salad } from 'lucide-react'; 

// H√†m √°nh x·∫° t√™n danh m·ª•c th√†nh icon
const getCategoryIcon = (categoryTitle) => {
    const title = categoryTitle ? categoryTitle.toUpperCase() : '';
    if (title.includes('KHAI V·ªä') || title.includes('ENTR√âES')) return Salad;
    if (title.includes('CH√çNH') || title.includes('PLATS PRINCIPAUX')) return ChefHat;
    if (title.includes('TR√ÅNG MI·ªÜNG') || title.includes('DESSERTS')) return Coffee;
    if (title.includes('R∆Ø·ª¢U VANG') || title.includes('WINE')) return Wine;
    return ChefHat;
};


// üëá COMPONENT M·ªöI: MenuCard - Hi·ªÉn th·ªã m√≥n ƒÉn d·∫°ng th·∫ª (card)
const MenuCard = ({ item }) => (
    <div className="bg-gray-800 p-4 rounded-xl shadow-lg flex flex-col hover:shadow-amber-500/30 transition duration-300">
        
        {/* L·∫•y h√¨nh ·∫£nh t·ª´ item.imageURL */}
        {item.imageURL && (
            <img 
                src={item.imageURL || 'https://via.placeholder.com/300/1f2937/d1d5db?text=Food'} 
                alt={item.name} 
                className="w-full h-40 object-cover rounded-lg mb-3"
            />
        )}
        
        <h3 className="text-xl font-bold font-serif text-amber-500 mb-1">{item.name}</h3>
        <p className="text-sm text-gray-400 flex-grow mb-3">{item.description}</p>
        
        <div className="mt-auto pt-3 border-t border-gray-700">
            <p className="text-2xl font-extrabold text-white text-right">
                {/* Hi·ªÉn th·ªã gi√° v√† ƒë∆°n v·ªã */}
                {item.price 
                    ? `${item.price.toLocaleString('vi-VN')} ${item.unit || 'VNƒê'}` 
                    : item.unit || "Li√™n h·ªá"}
            </p>
        </div>
    </div>
);
// üëÜ K·∫æT TH√öC COMPONENT MenuCard üëÜ


const MenuPage = () => {
    const [menuData, setMenuData] = useState([]);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState(null);
    
    // KHAI B√ÅO useRef ƒë·ªÉ l∆∞u tr·ªØ c√°c tham chi·∫øu ƒë·∫øn c√°c danh m·ª•c
    const categoryRefs = useRef({}); 
    // KHAI B√ÅO state ƒë·ªÉ theo d√µi danh m·ª•c hi·ªán t·∫°i (d√πng cho vi·ªác highlight)
    const [activeCategory, setActiveCategory] = useState(null); 

    // H√†m cu·ªôn ƒë·∫øn danh m·ª•c (Kh√¥ng ƒë·ªïi)
    const scrollToCategory = (categoryName) => {
        const ref = categoryRefs.current[categoryName];
        if (ref) {
            const yOffset = -120;
            const y = ref.getBoundingClientRect().top + window.scrollY + yOffset;
            window.scrollTo({ top: y, behavior: 'smooth' });
            setActiveCategory(categoryName);
        }
    };
    
    // H√†m theo d√µi Intersection Observer (Kh√¥ng ƒë·ªïi)
    useEffect(() => {
        const observer = new IntersectionObserver(
            (entries) => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        setActiveCategory(entry.target.dataset.category);
                    }
                });
            },
            {
                rootMargin: '-120px 0px -70% 0px', 
                threshold: 0 
            }
        );

        Object.values(categoryRefs.current).forEach(ref => {
            if (ref) {
                observer.observe(ref);
            }
        });

        return () => observer.disconnect();
    }, [menuData]); 

    // Fetch Data (Kh√¥ng ƒë·ªïi)
    useEffect(() => {
        const fetchMenu = async () => {
            try {
                // ƒê·∫£m b·∫£o server backend ƒëang ch·∫°y ·ªü c·ªïng 5000
                const response = await fetch('http://localhost:5000/api/menu'); 
                
                if (!response.ok) {
                    throw new Error('Failed to fetch menu data');
                }
                
                const result = await response.json();
                setMenuData(result.data || []);
                
            } catch (err) {
                console.error("L·ªói khi fetch menu:", err);
                setError('Kh√¥ng th·ªÉ t·∫£i th·ª±c ƒë∆°n. Vui l√≤ng ki·ªÉm tra Server v√† MongoDB.');
            } finally {
                setIsLoading(false);
            }
        };

        fetchMenu();
    }, []);
    

    if (isLoading) {
        return <div className="pt-32 pb-20 bg-gray-900 min-h-screen text-white text-center text-2xl">ƒêang t·∫£i th·ª±c ƒë∆°n...</div>;
    }

    if (error) {
        return <div className="pt-32 pb-20 bg-gray-900 min-h-screen text-red-500 text-center text-2xl">{error}</div>;
    }


    return (
        <div className="pt-32 pb-20 bg-gray-900 min-h-screen text-white">
            <div className="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">
                
                {/* Ti√™u ƒë·ªÅ trang Menu (Kh√¥ng ƒë·ªïi) */}
                <header className="text-center mb-16">
                    <p className="text-amber-500 font-serif uppercase tracking-widest mb-2">
                        TO√ÄN B·ªò TH·ª∞C ƒê∆†N
                    </p>
                    <h1 className="text-5xl md:text-7xl font-extrabold leading-tight font-serif text-white">
                        B·ªô S∆∞u T·∫≠p L'ESSENCE
                    </h1>
                    <p className="text-gray-400 mt-4 text-lg max-w-xl mx-auto">
                        Kh√°m ph√° h√†nh tr√¨nh ·∫©m th·ª±c D∆∞·ª°ng Sinh, n∆°i k·ªπ thu·∫≠t Fine Dining Ph√°p g·∫∑p g·ª° tri·∫øt l√Ω c√¢n b·∫±ng √Å ƒê√¥ng.
                    </p>
                </header>

                {/* B·ªê C·ª§C 2 C·ªòT CHO MENU & DANH M·ª§C L·ªåC (Kh√¥ng ƒë·ªïi) */}
                <div className="flex gap-10">
                    
                    {/* C·ªòT 1: SIDEBAR DANH M·ª§C (Kh√¥ng ƒë·ªïi) */}
                    <aside className="hidden lg:block w-64 flex-shrink-0">
                        <div className="sticky top-28 bg-gray-800 p-6 rounded-xl shadow-lg border border-amber-500/30">
                            <h3 className="text-2xl font-bold font-serif text-white mb-4 border-b border-gray-600 pb-2">
                                Danh M·ª•c
                            </h3>
                            <ul className="space-y-2">
                                {menuData.map((category) => (
                                    <li key={category.categoryName}>
                                        <button
                                            onClick={() => scrollToCategory(category.categoryName)}
                                            className={`
                                                w-full text-left py-2 px-3 rounded-lg transition duration-200
                                                ${activeCategory === category.categoryName
                                                    ? 'bg-amber-600 text-white font-bold' // ACTIVE
                                                    : 'text-gray-300 hover:bg-gray-700 hover:text-amber-500' // INACTIVE
                                                }
                                            `}
                                        >
                                            <span className='font-medium text-lg'>{category.categoryName}</span>
                                        </button>
                                    </li>
                                ))}
                            </ul>
                        </div>
                    </aside>

                    {/* C·ªòT 2: N·ªòI DUNG MENU CH√çNH */}
                    <main className="flex-grow">
                        <div className="space-y-16">
                            {menuData.map((category) => {
                                const IconComponent = getCategoryIcon(category.categoryName); 
                                
                                return (
                                    <div 
                                        key={category.categoryName} 
                                        ref={el => categoryRefs.current[category.categoryName] = el}
                                        data-category={category.categoryName}
                                        className="bg-gray-800 p-8 rounded-xl shadow-2xl"
                                    >
                                        
                                        {/* Ti√™u ƒë·ªÅ danh m·ª•c (Kh√¥ng ƒë·ªïi) */}
                                        <div className="flex items-center justify-center mb-10 border-b-2 border-amber-600/50 pb-4">
                                            <IconComponent className="w-8 h-8 text-amber-500 mr-4" />
                                            <h2 className="text-3xl font-bold font-serif text-amber-500 uppercase tracking-wider">
                                                {category.categoryName} 
                                            </h2>
                                        </div>

                                        {/* üëá DANH S√ÅCH M√ìN ƒÇN D·∫†NG CARD (Grid Layout) */}
                                        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-6">
                                            {category.items.map((item, itemIndex) => (
                                                <MenuCard key={item._id || itemIndex} item={item} />
                                            ))}
                                        </div>
                                        {/* üëÜ K·∫æT TH√öC DANH S√ÅCH M√ìN ƒÇN D·∫†NG CARD */}
                                    </div>
                                );
                            })}
                        </div>
                    </main>
                </div>

                {/* Ghi ch√∫ ch√¢n trang (Kh√¥ng ƒë·ªïi) */}
                <footer className="text-center mt-20 text-gray-500 italic text-sm">
                    <p>* Gi√° tr√™n ch∆∞a bao g·ªìm 10% VAT v√† 5% ph√≠ ph·ª•c v·ª•. Vui l√≤ng h·ªèi Sommelier ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n r∆∞·ª£u vang.</p>
                </footer>
            </div>
        </div>
    );
};

export default MenuPage;