import React, { useState, useMemo } from 'react';
// ƒê·∫£m b·∫£o ƒë∆∞·ªùng d·∫´n DataTable kh·ªõp v·ªõi Canvas
import DataTable from '../../components/AdminComponents/DataTable'; 
import { Search, RotateCcw } from 'lucide-react';

const sampleReservations = [
    {
        id: 'R001',
        customer: 'Nguy·ªÖn VƒÉn A',
        date: '2025-11-15',
        time: '19:00',
        guests: 4,
        table: 'B√†n 12',
        status: 'ƒê√£ x√°c nh·∫≠n'
    },
    {
        id: 'R002',
        customer: 'Tr·∫ßn Th·ªã B',
        date: '2025-11-15',
        time: '20:30',
        guests: 2,
        table: 'Ch∆∞a x·∫øp',
        status: 'Ch·ªù x·ª≠ l√Ω'
    },
    {
        id: 'R003',
        customer: 'Ph·∫°m ƒê·ª©c C',
        date: '2025-11-14',
        time: '18:30',
        guests: 6,
        table: 'B√†n VIP',
        status: 'ƒê√£ ho√†n th√†nh'
    },
    {
        id: 'R004',
        customer: 'L√™ VƒÉn D',
        date: '2025-11-16',
        time: '12:00',
        guests: 3,
        table: 'B√†n 5',
        status: 'Ch·ªù x·ª≠ l√Ω'
    },
    {
        id: 'R005',
        customer: 'V≈© Th·ªã E',
        date: '2025-11-14',
        time: '21:00',
        guests: 2,
        table: 'B√†n 8',
        status: 'ƒê√£ h·ªßy'
    },
];

const ReservationManagement = () => {
    // State ƒë·ªÉ l∆∞u tr·ªØ d·ªØ li·ªáu ch√≠nh (Gi·∫£ l·∫≠p vi·ªác fetch t·ª´ Firestore)
    const [reservations, setReservations] = useState(sampleReservations);
    
    // State qu·∫£n l√Ω b·ªô l·ªçc
    const [filterStatus, setFilterStatus] = useState('T·∫•t c·∫£');
    const [filterDate, setFilterDate] = useState('');

    // H√†m gi·∫£ l·∫≠p c√°c h√†nh ƒë·ªông qu·∫£n l√Ω
    const handleConfirm = (id) => {
        // Thay ƒë·ªïi tr·∫°ng th√°i trong state (gi·∫£ l·∫≠p c·∫≠p nh·∫≠t Firestore)
        setReservations(prev => 
            prev.map(r => r.id === id ? { ...r, status: 'ƒê√£ x√°c nh·∫≠n' } : r)
        );
        console.log(`X√°c nh·∫≠n ƒë·∫∑t b√†n: ${id}`);
    };

    const handleDelete = (id) => {
        // X√≥a kh·ªèi state (gi·∫£ l·∫≠p x√≥a tr√™n Firestore)
        setReservations(prev => prev.filter(r => r.id !== id));
        console.log(`X√≥a ƒë·∫∑t b√†n: ${id}`);
    };
    
    // H√†m n√†y s·∫Ω m·ªü modal ch·ªânh s·ª≠a trong ·ª©ng d·ª•ng th·ª±c
    const handleEdit = (id) => {
        console.log(`Ch·ªânh s·ª≠a ƒë·∫∑t b√†n: ${id}`);
        // Logic m·ªü modal ch·ªânh s·ª≠a s·∫Ω ƒë∆∞·ª£c th√™m v√†o sau
    };


    // D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c l·ªçc: D√πng useMemo ƒë·ªÉ ch·ªâ t√≠nh to√°n l·∫°i khi filter ho·∫∑c data thay ƒë·ªïi
    const filteredReservations = useMemo(() => {
        let filtered = reservations;

        if (filterStatus !== 'T·∫•t c·∫£') {
            filtered = filtered.filter(r => r.status === filterStatus);
        }

        if (filterDate) {
            filtered = filtered.filter(r => r.date === filterDate);
        }

        return filtered;
    }, [reservations, filterStatus, filterDate]);

    // Truy·ªÅn c√°c h√†m x·ª≠ l√Ω h√†nh ƒë·ªông v√†o DataTable d∆∞·ªõi d·∫°ng props
    const actions = {
        onConfirm: handleConfirm,
        onEdit: handleEdit,
        onDelete: handleDelete,
    };
    
    const columns = ['M√£ ƒêB', 'Kh√°ch h√†ng', 'Ng√†y', 'Gi·ªù', 'SL Kh√°ch', 'B√†n', 'Tr·∫°ng th√°i'];

    return (
        <div className="space-y-6 p-4">
            <h1 className="text-3xl font-extrabold text-gray-900">üóìÔ∏è Qu·∫£n l√Ω ƒê·∫∑t b√†n</h1>
            
            {/* Thanh c√¥ng c·ª• v√† B·ªô l·ªçc */}
            <div className="flex flex-col md:flex-row justify-between items-start md:items-center bg-white p-4 rounded-xl shadow-lg">
                <div className="flex flex-col sm:flex-row space-y-3 sm:space-y-0 sm:space-x-4 w-full md:w-auto">
                    
                    {/* B·ªô l·ªçc Tr·∫°ng th√°i */}
                    <select 
                        className="border border-gray-300 rounded-lg p-2 focus:ring-blue-500 focus:border-blue-500 transition"
                        value={filterStatus}
                        onChange={(e) => setFilterStatus(e.target.value)}
                    >
                        <option value="T·∫•t c·∫£">T·∫•t c·∫£ tr·∫°ng th√°i</option>
                        <option value="Ch·ªù x·ª≠ l√Ω">Ch·ªù x·ª≠ l√Ω</option>
                        <option value="ƒê√£ x√°c nh·∫≠n">ƒê√£ x√°c nh·∫≠n</option>
                        <option value="ƒê√£ h·ªßy">ƒê√£ h·ªßy</option>
                        <option value="ƒê√£ ho√†n th√†nh">ƒê√£ ho√†n th√†nh</option>
                    </select>
                    
                    {/* B·ªô l·ªçc Ng√†y */}
                    <input 
                        type="date" 
                        className="border border-gray-300 rounded-lg p-2 focus:ring-blue-500 focus:border-blue-500 transition" 
                        value={filterDate}
                        onChange={(e) => setFilterDate(e.target.value)}
                    />
                    
                    {/* N√∫t Reset Filter */}
                    <button 
                        className="bg-gray-200 text-gray-800 py-2 px-4 rounded-lg hover:bg-gray-300 transition flex items-center justify-center"
                        onClick={() => {
                            setFilterStatus('T·∫•t c·∫£');
                            setFilterDate('');
                        }}
                        title="ƒê·∫∑t l·∫°i b·ªô l·ªçc"
                    >
                        <RotateCcw size={18} className="mr-2"/> ƒê·∫∑t l·∫°i
                    </button>
                </div>
                
                {/* N√∫t Th√™m Th·ªß c√¥ng */}
                <button className="bg-yellow-500 text-white font-bold py-2 px-4 rounded-lg hover:bg-yellow-600 transition mt-4 md:mt-0 w-full md:w-auto shadow-md">
                    + Th√™m ƒê·∫∑t b√†n Th·ªß c√¥ng
                </button>
            </div>

            {/* B·∫£ng d·ªØ li·ªáu ƒê·∫∑t b√†n */}
            <DataTable 
                title={`Danh s√°ch ƒê·∫∑t b√†n (${filterDate ? `Ng√†y ${filterDate}` : 'T·∫•t c·∫£'})`} 
                columns={columns} 
                data={filteredReservations} 
                actions={actions} // Truy·ªÅn c√°c h√†m h√†nh ƒë·ªông v√†o DataTable
            />

        </div>
    );
};

export default ReservationManagement;
